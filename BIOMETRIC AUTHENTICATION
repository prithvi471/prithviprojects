{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8lYkKK/nRSwGcKJBbdnio",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/prithvi471/prithviprojects/blob/main/BIOMETRIC%20AUTHENTICATION\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install nest_asyncio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dzYJVshcwjYN",
        "outputId": "f9b94371-2d1c-4339-97b7-1f65741475d3"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nest_asyncio in /usr/local/lib/python3.11/dist-packages (1.6.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nest_asyncio\n",
        "nest_asyncio.apply()"
      ],
      "metadata": {
        "id": "rsUpu0Fqwm7M"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import asyncio\n",
        "import nest_asyncio\n",
        "\n",
        "# Apply nest_asyncio to allow nested event loops\n",
        "nest_asyncio.apply()\n",
        "\n",
        "async def hello_world():\n",
        "    print(\"Hello, World!\")\n",
        "    await asyncio.sleep(1)\n",
        "    print(\"Goodbye, World!\")\n",
        "\n",
        "# Run the asyncio function\n",
        "asyncio.run(hello_world())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jNS3b4OYwzo8",
        "outputId": "327ca9ab-5a2d-4a4b-e8f8-c752d8ea0b13"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n",
            "Goodbye, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install nest_asyncio to allow nested event loops\n",
        "!pip install nest_asyncio\n",
        "\n",
        "import asyncio\n",
        "import nest_asyncio\n",
        "import hashlib\n",
        "from cryptography.hazmat.primitives.asymmetric import rsa, padding\n",
        "from cryptography.hazmat.primitives import hashes\n",
        "\n",
        "# Apply nest_asyncio to allow nested event loops\n",
        "nest_asyncio.apply()\n",
        "\n",
        "async def read_biometric():\n",
        "    await asyncio.sleep(1)\n",
        "    return input(\"Real-time biometric scan (simulate): \")\n",
        "\n",
        "async def read_device_id():\n",
        "    await asyncio.sleep(0.5)\n",
        "    return input(\"Real-time device id (simulate): \")\n",
        "\n",
        "async def register():\n",
        "    print(\"=== Registration Stage ===\")\n",
        "    biometric = input(\"Register biometric data: \")\n",
        "    device_id = input(\"Register device id: \")\n",
        "    biometric_hash = hashlib.sha256(biometric.encode()).hexdigest()\n",
        "    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\n",
        "    public_key = private_key.public_key()\n",
        "    user_data = {\n",
        "        \"biometric_hash\": biometric_hash,\n",
        "        \"device_id\": device_id,\n",
        "        \"private_key\": private_key,\n",
        "        \"public_key\": public_key\n",
        "    }\n",
        "    print(\"Registration complete.\\n\")\n",
        "    return user_data\n",
        "\n",
        "async def realtime_authentication(user_data):\n",
        "    try:\n",
        "        while True:\n",
        "            biometric = await read_biometric()\n",
        "            device_id = await read_device_id()\n",
        "            biometric_hash_input = hashlib.sha256(biometric.encode()).hexdigest()\n",
        "            if biometric_hash_input != user_data[\"biometric_hash\"]:\n",
        "                print(\"Real-time biometric authentication failed!\")\n",
        "            elif device_id != user_data[\"device_id\"]:\n",
        "                print(\"Real-time device context authentication failed!\")\n",
        "            else:\n",
        "                print(\"Real-time authentication successful!\")\n",
        "                await sign_transaction(user_data)\n",
        "            print(\"Waiting for next authentication cycle...\\n\")\n",
        "            await asyncio.sleep(2)\n",
        "    except KeyboardInterrupt:\n",
        "        print(\"\\nExiting real-time authentication loop.\")\n",
        "\n",
        "async def sign_transaction(user_data):\n",
        "    transaction_message = input(\"Enter transaction details (simulate real-time payment): \")\n",
        "    signature = user_data[\"private_key\"].sign(\n",
        "        transaction_message.encode(),\n",
        "        padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH),\n",
        "        hashes.SHA256()\n",
        "    )\n",
        "    print(\"Transaction signed. Signature (hex):\", signature.hex())\n",
        "    try:\n",
        "        user_data[\"public_key\"].verify(\n",
        "            signature,\n",
        "            transaction_message.encode(),\n",
        "            padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH),\n",
        "            hashes.SHA256()\n",
        "        )\n",
        "        print(\"Signature verified successfully!\\n\")\n",
        "    except Exception as e:\n",
        "        print(\"Signature verification failed!\\n\", str(e))\n",
        "\n",
        "async def main():\n",
        "    user_data = await register()\n",
        "    print(\"Starting real-time authentication loop. Press Ctrl+C to exit.\")\n",
        "    await realtime_authentication(user_data)\n",
        "\n",
        "# Run the main function\n",
        "loop = asyncio.get_event_loop()\n",
        "loop.run_until_complete(main())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-VNhPSbvw2SX",
        "outputId": "ac1cf730-ed1b-4bdd-f24d-5f261404035f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nest_asyncio in /usr/local/lib/python3.11/dist-packages (1.6.0)\n",
            "=== Registration Stage ===\n",
            "Register biometric data: 112\n",
            "Register device id: 332\n",
            "Registration complete.\n",
            "\n",
            "Starting real-time authentication loop. Press Ctrl+C to exit.\n"
          ]
        }
      ]
    }
  ]
}